services in angular and dependency injection:
-----------------------------------------------------

services:
--------------------------

1. creation:
file=> data.service.ts

export class DataService{
	constructor(){}	
	getData(){}
	saveData(){}
	removeData(){	}
}

2. register a service provider:

a. is the service going to be used by an asset (would you like to hae a dedicated service instance for an asset?)
	register a service provider at the asset level
	note: if you regster the service provider at parent level for nested components, then single dedicated instance of service for the parent component will be created and shared across instances of nested components

b. would you like to have a single service instance for all the assets of a feature module?
	register a service provider at the feature module level

c. would you like to have a single service instance for all the assets of the entire application?
	register a service provider at the root module level

Angular maintains 3 types of Injector, one for each level

providers:[
	DataService (DataService => DataService)
]

or
providers:[
	{
		provide:DataService,
		useClass:DataService
	}
]

or
providers:[
	{
		provide:<custom_token>,
		useClass:DataService
	}
]


a. asset level registration:
@Component({
	providers:[DataService]
})


b. feature module level registration:
@NgModule({
	declarations:[SampleComponent,,,,],
	providers:[DataService]
})
export class SomeModule{}

c. root module level registration:
@NgModule({
	declarations:[AppComponent,...],
	providers:[DataService]
})
export class AppModule{}

3. Consume:
i.
export class SampleComponent{
	private ds:DataService;// = new DataService();
	constructor(_ds:DataService){
		this.ds = _ds
	}
}

ii.
export class SampleComponent{
	private ds:DataService;// = new DataService();
	constructor(@Inject(DataService) _ds:DataService){
		this.ds = _ds
	}
}

iii.
export class SampleComponent{
	private ds:DataService;// = new DataService();
	constructor(@Inject(<custom-_token>) _ds:DataService){
		this.ds = _ds
	}
}

Note:
1. as provider token, Interface name can't be used
2. @Inject() is a decorator for parameter of a method, NOT a decorator for property of the class

@Injectable() => tells angular to resolve the dependencies of the asset
@Component(), @Directive, @Pipe(), @NgModule() etc. all of them implements @Injectable()
Since the service class is not decorated with any decorator as such, hence if the service class has some other dependenies, then @Injectable() MUST be used with service class to inform angular DI framework to figure out/resolve the dependencies of that service

Best Practice: use @Injectable() at the top of the service always, irrespective of whether that service has any dependencies or not, for the sake of uniformity in Angular.

Inversify JS => used with TypeScript based application


HTTP requests:
------------------------------------------------------
angular provides a built-in service class 'HttpClient' to make HTTP requests using its methods
get() => sends HTTP request with GET method to get record(s)
put() => sends HTTP request with PUT method to update a record
post() => sends HTTP request with POST method to add a new record
delete() => sends HTTP request with DELETE method to delete an existing record, 
patch() etc.

old:
--------------------------------------------------------------------------
its provider is registered with a module class => HttpClientModule

providers:[HttpClientModule]

new:
---------------------------------------------------------------------
call a method provideHttpClient()

providers:[
	provideHttpClient()
]

return value of HttpClient methods:
-------------------------------------------
Observable<Object>
	pipe() => pass transformataion logic

const obs = this.ps.getAll()
    obs.subscribe({
      //when observable receives data, "next" callback will be called
      next: () => { },
      //if observable receives no data, rather exception occurs due to nextwork issue, backend server down etc. "error" callback will be called
      error: () => { },
      //if there is no error, after "next" callback this "complete" callback will be called
      complete: () => {
        //you can write any other operation (even another async operation) after the "next" callback is executed
      }
    })

export interface LoginInformation{
	userId:string;
	serviceLevel:string;
}

RunScheduledTask(taskName: string, sessionID: string, loginInformation: LoginInformation): Observable<any> {
    const headers = new HttpHeaders({
      'Content-Type': 'application/json'
    });
    const response = this.http.put<any>(`${this.serviceUrl}/RunScheduledTask?taskName=${taskName}&sessionID=${sessionID}`, loginInformation, { headers });
    return response;
  }


Observable() 
get()=> Observable<T> => Promise<T>,

obs
	.pipe(
		take()
		
	),
	filter(
		
	)
).subscribe({})


note: side-effect causing code should not be written inside component's constructor

Lifecycle of components:
-------------------------------------
1. creation phase:
	a. ctor called
	b. changes event fired
	c. init event fired (fired ONE time in the lifecycle of component)

2. update phase:
	a. changes event fired every time nested component receives data from parent

3. destruction:
	a. destroy event gets fired

event			interface		method
-----------------------------------------
	X			OnX				ngOnX











