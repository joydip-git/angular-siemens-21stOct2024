Roadmap:
--------------------------------------
Languages:
JavaScript and TypeScript

server-side framework:
---------------------------------------
Node JS

client-side framework for quick UI development:
----------------------------------------------------------
Angular


s/w =>
--------------------
1. Node JS
2. VS Code


html (hyper-text mark-up language)
css (cascading style-sheet)
javascript

angular-training-codes
		app-dir: js-basics-app
							index.html


			html
head (optional)	    body
------------------------------------
information		design of the page
/metadata


real-time deployment web servers:
-------------------------------------------
IIS (Internet Information Services) => web server is shipped with Windows O/S
Tomact (Aapache) => cam be installed in any machine
NgInx => web server
Vercel => web server
etc.


type of elements/tags in html:
------------------------------
a. block
b. inline

CSS styles:
------------------------
a. inline style (applying the style directly on the element)
b. outline style (using <style> tag)
	1. inside the HTML file
	2. outside the HTML file (inside a separate file with extension "css") and then linking the CSS file with HTML file

	i. using element selector
	ii. using id selector
	iii. using class selector

CSS specifity => precedence of cascading effect
browser styles > CSS file style > outline style (in style tag) > inline style

Application development Server:
---------------------------------------------
web servers which are light-weight, without lots of features, simply to host your web app during development phase in the local machine. Theses web servers can process request coming from the same machine itself and generally hosts the web application using different port number, apart from 8080.

Live Server (As a plugin of VS Code)
Lite server 
webpack-dev-server (Webpack)


JavaScript:
-----------------------------------------
1. scripting (programming) language
2. Object-based programming language
3. loosely typed programming language
4. dynamic programming language
5. handle user interaction in web application
6. there is no strict data typification in JS

can be written in:
1. HTML file itself, inside in a script tag, placed in either head or body element or simultaneously in both
2. in a separate file owth extension "js" and linking the same with HTML file using script tag

web application programming model: event-based programming

data types in JS:
-----------------------------
1. number
2. string => ""/''
3. boolean
4. object
5. function

keywords (data type/value)
----------------------------
undefined, null, NaN, Infinity

undefined+12 => NaN
12/0 => Infinity

operators:
-----------
=== (strict equality) and !== (strict inequality)
if(a==b) if (a===b)

var a = undefined
if(a) => if a is defined (NOT undefined)
if(a !==undefined)

control flow statements:
-----------------------------
if, if...else
while, do...while
switch...case

for, for...in, for...of

JS engines of different browsers:
---------------------------------------------
chrome: v8
safari: JS Core (nitro)
firefox: spidermonkey
opera, edge: chromium


JS execution:
-----------------------------
1. preparation stage
2. execution stage

whenever a function is invoked in JS, an ibhect is created, known as - function execution context object (FEC)

variables declared using "var","let" and "const" keywords, are considered as "local" variable of that function. memory blocks for those local variables will be part an object, refererred by a property "variable object" of FEC

hoisting:
---------------
variable hoisting
function hoisting => function declaration is hoisted but function expression is not hoisted

ECMA
ECMAScript => guideline (specification) for scripting languages

2015 	ES 6.0
------------------------
let, const keywords
class, constructor, super, extends
templated string (string interpolation)
































