the "things" that you can create in angular application:
------------------------------------------------------------------
asset				type				decorator (@angular/core)
------------------------------------------------------
component			class			@Component({...})
directive			class 		@Directive({...})
pipe					class			@Pipe({...})
module				class			@NgModule({...})
service				class			@Injectable({...}) [optional]


1. binding
2. directives
3. how to display a list of items in UI
4. conditional rendering
5. pipe and how to create custom pipe

Binding and declarative syntaxes:
1. data binding: passing data from the code of the component to view of the same component
	a. {{ <property-value> }} => interpolation (always stringifies the data)
	b. <element [proprty/attribute-of-the-element]="class-property-value"> => property binding (does not strigify the property value)

2. event binding
	<element (event-name)="method-of-the-component(values)">

data property			controls
----------------------------------
title						h2		

dirty checking
change detection

template variable: a variable to store the reference of the template (i.e. a textbox dom object in my app)

<element (event)="method(elementRef.propName)" #elementRef>

var titleInput = document.getElementById('txtTitle')
titleInput.value

package: @angular/common

@Directive({ selector:'[ngFor]'})
export class NgForOfDirective{
	method(expression,template){
		//dynamically generates the templates
		var ul = document....('ul')
		for(let name of names)
		{
			var li = document.createElement('li')
			li.innerText = name
			ul.append(li)

		}
	}
}

@NgModule({
	declarations:[NgForOfDirective],
	exports:[NgForOfDirective]
})
export class CommonModule{
}


package: @angular/platform-browser

@NgModule({
	declarations:[],
	exports:[],
	imports:[CommonModule],
	exports:[CommonModule]
})
export class BrowserModule{
}


directives:
---------------------------------------
1. structural directives => which helps you manipulate DOM
	example: *ngFor, *ngIf, *ngSwitch

2. attribute directives => which DOES NOT manipulate DOM, but helps you extend the behavior of an existing element
	example: ngModel, ngForm, formControl, ....

3. component directives => components (only directive with a view)
<ng-template>...</..>

pipe:
------------------
a place for writing data transformation (data piping) logic

{{p.name|uppercase}} => new UpperCasePipe().transform(p.name)

{{p.salary|currency:'INR':'0.0-2'}} => new CurrencyPipe().transform(p.salary,'INR','0.0-2')

import {Pipe, PipeTransform} from '@angular/core'

@Pipe({ name:'x'})
export class XPipe implements PipeTransform{
		//... => rest operator (to declare such an array as part of the function argument list,which can directly accept any number of parameters)
		transform(value:any,...args:any[]):any{
			return //logic...
		}
}

@NgModule({
	declarations:[NgForOfDirective, UpperCasePipe, LowerCasePipe],
	exports:[NgForOfDirective]
})
export class CommonModule{
}

var ddlChoices = document....()
var arr = ddlChoices.options
var selectedOption = arr[dddlChoices.selectedIndex]
var choice = selectedOption.text


A									B   							C
----------------------------------------------------------------
declarations:[AC1]		declarations:[BC1]			declarations:[CC1]
exports:[AC1]				imports:[AModule]				imports:[BModule]
								exports:[BC1,AModule]


Ng generate command: (treats "app" directory as the root for any file that it generates)
-----------------------------------------------------------------------------------------
module: ng generate/g module/m products (app/products/products.module.ts => ProductsModule)

component: ng generate/g component/c products/components/product-list (app/products/components/product-list/product-list.component.ts/.spec.ts/html/css)
ProductListComponent

automatic registration:
@NgModule({declarations:[ProductListComponent]})
ProductsModule

pipe: ng g pipe/p products/pipes/filter-product (app/products/pipes/filter-product.pipe.ts => FilterProductPipe)

automatic registration:
@NgModule({declarations:[ProductListComponent, FilterProductPipe]})
ProductsModule








